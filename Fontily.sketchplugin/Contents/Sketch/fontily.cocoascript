@import "FontilyDialog.cocoascript";
@import "Layout.cocoascript";
@import "LayoutView.cocoascript";
@import "colorScheme.cocoascript";

/**
 * Entry point for font replacer
 * @param context
 */
function replaceMissingFonts(context) {
    var result = findFontLayers(context);
    openFontilyDialog(context, result.fonts, result.count, true);
}

/**
 * Entry point for font lister
 * @param context
 */
function showFontLayers(context) {
    var result = findFontLayers(context);
    openFontilyDialog(context, result.fonts, result.count, false);
}

/**
 * Entry point for feature requests
 * @param context
 */
function requestFeature(context) {

    // Create the interface
    var emailInput = null, msgInput = null;
    var modal = createUserInterface();
    // Show it and process the form
    handleAlertResponse(modal, modal.runModal());

    function createUserInterface() {
        var userInterface = COSAlertWindow.new();

        userInterface.setMessageText('Request new feature');
        userInterface.setInformativeText("Didn't found what you were looking for? No problem! Write it down, and I will try to implement it in the nearest version of Fontily :)");

        userInterface.addTextLabelWithValue("Contact Email (optional)");
        userInterface.addAccessoryView(emailInput = Layout.createTextInput(1, "john.appleseed@sketchapp.com").input);

        var msg = Layout.createTextInput(5);
        msgInput = msg.input;
        userInterface.addTextLabelWithValue("Feature description");
        userInterface.addAccessoryView(msg.scroller);

        userInterface.addButtonWithTitle('OK');
        userInterface.addButtonWithTitle('Cancel');

        emailInput.setNextKeyView(msgInput);

        return userInterface;
    }

    /**
     * Collect user input from alert window
     * @param  {COSAlertWindow} alert             The alert window
     * @param  {Int}            responseCode      Alert window response code
     * @return {Object}                           Alert window results
     */
    function handleAlertResponse(alert, responseCode) {
        if (responseCode == "1000") {
            var query = [];
            query.push(["email", encodeURIComponent(emailInput.stringValue())].join('='));
            query.push(["msg", encodeURIComponent(msgInput.textStorage().string())].join('='));
            var response = httpRequest("http://partyka.io/fontily/request.php?" + query.join('&'));

            var success;
            try {
                response = JSON.parse(response);
                success = response.success;
            } catch (e) {
                success = "no";
            }
            var userInterface = COSAlertWindow.new();

            userInterface.setMessageText('Request new feature');
            var text = "";
            if (success == "yes") {
                text = "Thank you for your input! Message has been sent.";
            } else {
                text = "There was a problem submitting your request, message has not been sent.\r\n\r\nTry again soon, or write me at maciek@partyka.io";
            }
            userInterface.setInformativeText(text);

            userInterface.addButtonWithTitle('Close');
            userInterface.runModal();

        }
        return null;
    }
}

function httpRequest(queryURL) {
    var request = NSMutableURLRequest.new();
    request.setHTTPMethod("GET");
    request.setURL(NSURL.URLWithString(queryURL));

    var error = NSError.new();
    var responseCode = null;

    var oResponseData = NSURLConnection.sendSynchronousRequest_returningResponse_error_(request, responseCode, error);

    var dataString = NSString.alloc().initWithData_encoding_(oResponseData, NSUTF8StringEncoding);
    print("[" + Date.now() + "] " + dataString);
    return dataString;
}
/**
 * Iterates over all document, looking for text layers. Saves font, and checks whether it may be missing.
 * @param context
 * @returns {{fonts: {}, count: number}}
 */
function findFontLayers(context) {
    var doc = context.document;
    var pages = doc.pages();
    var page, textLayer, foundFonts = {}, count = 0;

    var loop = pages.objectEnumerator();
    while (page = loop.nextObject()) {
        var scope = page.children();
        var predicate = NSPredicate.predicateWithFormat("className == %@", 'MSTextLayer');
        var queryResult = scope.filteredArrayUsingPredicate(predicate);
        if (queryResult.count() > 0) {
            var loop2 = queryResult.objectEnumerator();
            while (textLayer = loop2.nextObject()) {
                var text = textLayer.stringValue();
                var font = textLayer.fontPostscriptName();
                if (typeof foundFonts[font] == "undefined") {
                    foundFonts[font] = {layers: [], isMissing: !textLayer.canScale()};
                    count += 1;
                }
                foundFonts[font].layers.push(textLayer);
            }
        }
    }
    return {fonts: foundFonts, count: count};
}

/**
 * Get system fonts
 * @return {Array}
 */
function getFonts() {
    var fontManager = NSFontManager.sharedFontManager();
    var fonts = [];
    var sys_fonts = fontManager.availableFonts();
    //has to convert them to normal array, as {sys_fonts} is array-like object, and is persistent, so when modified, changes stay between runs of script
    for (var i = 0; i < sys_fonts.length; ++i) {
        fonts.push(sys_fonts[i]);
    }
    return fonts;
}

/**
 * Opens main dialog, which allows user to select which fonts to replace
 * @param context
 * @param textLayers
 * @param foundCount
 */
function openFontilyDialog(context, textLayers, foundCount, enableReplace) {
    var fontKeys = [];
    var inputs = [];
    var SELECT_FONT_LABEL = "Select font...";
    // Create the interface
    var modal = createUserInterface();
    // Show it and process the form
    handleAlertResponse(modal, modal.runModal());

    function createUserInterface() {
        var modal = new FontilyDialog('Fontily ' + (enableReplace ? 'Replacer' : 'Listing'));

        if (foundCount == 0) {
            modal.setInformativeText('No fonts found.');
            modal.addButtonWithTitle('OK');
        } else {
            //fonts list
            var avail_fonts = getFonts();
            avail_fonts.unshift(SELECT_FONT_LABEL);

            //'constraints'
            var sizes = {
                leftCol: {width: 225},
                rightCol: {width: 300, marginLeft: 10, marginRight: 25},
                scroll: {height: 300},
                missingLabel: {height: 12, fontSize: 9}
            };
            if (!enableReplace) {
                sizes.leftCol.width = 300;
                sizes.rightCol.width = 200;
            }
            //calculate modal width based on given constraints
            sizes.section = {
                spaceBetween: 20,
                width: 1 + sizes.leftCol.width + sizes.rightCol.width + sizes.rightCol.marginLeft + sizes.rightCol.marginRight
            };

            var scrollView = Layout.createMainScrollView(sizes.section.width, sizes.scroll.height, false),
                scrollContent = new LayoutView(0, 0, sizes.section.width);

            var sectionCount = 0, countMissing = 0;
            var totalHeight = 0;
            var selectReplaceInput;
            for (var font_name in textLayers) {
                if (textLayers.hasOwnProperty(font_name) == false) {
                    continue;
                }
                var textLayer = textLayers[font_name];

                var fontHeader = new LayoutView(0, 0, sizes.section.width);
                var fontSection = new LayoutView(0, totalHeight, sizes.section.width);

                if (sectionCount > 0) {
                    //add spacing between sections
                    //if font is missing, add smaller padding ('missing label' already has some height)
                    scrollContent.addPadding(textLayer.isMissing ? (sizes.section.spaceBetween - sizes.missingLabel.height) : sizes.section.spaceBetween);
                }

                if (textLayer.isMissing) {
                    //missing label
                    scrollContent.add(Layout.createLabel('Missing font! ', sizes.missingLabel.fontSize, colorScheme.warning, null, sizes.missingLabel.height));
                    ++countMissing;
                }

                //Header section
                fontHeader.add(Layout.createLabel((enableReplace ? 'Change font for "' + font_name + '"' : 'Font "' + font_name + '"'), 12, textLayer.isMissing ? colorScheme.warning : undefined, sizes.leftCol.width, "auto"), "absolute/resize");
                fontHeader.add(Layout.setPos(Layout.createLabel('Layers that use this font (' + textLayers[font_name].layers.length + ' in total)', 10, colorScheme.textSecondary), sizes.leftCol.width + sizes.rightCol.marginLeft, -2), "absolute");

                //Main section
                if (enableReplace) {
                    selectReplaceInput = Layout.createSelect(avail_fonts, font_name);
                    fontSection.add(selectReplaceInput);
                    fontSection.add(Layout.setPos(Layout.createFontList(textLayers[font_name].layers, true), sizes.leftCol.width + sizes.rightCol.marginLeft, 0), "absolute/resize");
                } else {
                    fontSection.addPadding(5);
                    fontSection.add(Layout.setPos(Layout.setSize(Layout.createFontList(textLayers[font_name].layers, false), sizes.section.width, undefined), 0, 0));
                    fontSection.addPadding(5);
                }
                //Add to main scroll view
                scrollContent.add(fontHeader);
                scrollContent.add(fontSection);

                ++sectionCount;
                totalHeight += fontSection.height();

                //save for later
                if (enableReplace) {
                    inputs.push(selectReplaceInput);
                    selectReplaceInput = null;
                }
                fontKeys.push(font_name);
            }

            modal.setInformativeText('Found ' + foundCount + ' fonts' + (countMissing > 0 ? ', ' + countMissing + ' missing' : ''));
            modal.addButtonWithTitle(enableReplace ? 'Replace' : 'OK');
            modal.addButtonWithTitle('Cancel');

            scrollView.setDocumentView(scrollContent.view());
            modal.addAccessoryView(scrollView);

            //scroll to top
            scrollView.documentView().scrollPoint(NSMakePoint(0.0, NSMaxY(scrollView.documentView().frame()) - NSHeight(scrollView.contentView().bounds())));
        }

        return modal;
    }

    /**
     * Collect user input from alert window
     * @param  {COSAlertWindow} alert             The alert window
     * @param  {Int}            responseCode      Alert window response code
     * @return {Object}                           Alert window results
     */
    function handleAlertResponse(alert, responseCode) {
        if (!enableReplace) {
            return;
        }
        if (responseCode == "1000") {
            for (var i = 0; i < foundCount; ++i) {
                var new_font = inputs[i].stringValue();
                if (new_font == SELECT_FONT_LABEL) {
                    continue;
                }
                var key = fontKeys[i];
                var layers = textLayers[key].layers;
                if (new_font == key) {
                    continue;
                }
                print("Replacing: " + key + "->" + new_font);
                for (var f = 0; f < layers.length; ++f) {
                    var layer = layers[f];
                    layer.setFontPostscriptName(new_font);
                }
            }
        }
    }
}
