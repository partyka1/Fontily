@import "colorScheme.cocoascript";

var Layout = {
    setPos: function (view, x, y) {
        var f = view.frame();
        view.setFrame(NSMakeRect(x == undefined ? f.origin.x : x, y == undefined ? f.origin.y : y, f.size.width, f.size.height));
        return view;
    },
    setSize: function (view, w, h) {
        var f = view.frame();
        view.setFrame(NSMakeRect(f.origin.x, f.origin.y, w == undefined ? f.size.width : w, h == undefined ? f.size.height : h));
        return view;
    },
    measureView: function (view) {
        return view.intrinsicContentSize();
    },
    /**
     * Creates NSTextView
     * @param text
     * @param size
     * @param color
     * @param rect_height
     * @returns {*}
     */
    createTextView: function (text, size, color, rect_height) {
        var tf = NSTextView.alloc().initWithFrame(NSMakeRect(0, 0, 300, rect_height == undefined || rect_height == "auto" ? 16 : rect_height));

        if (typeof color != "undefined") {
            tf.setTextColor(color);
        }
        if (typeof size != "undefined") {
            tf.setFont(NSFont.systemFontOfSize(size));
        }
        tf.setString(text);
        return tf;
    },


    /**
     * Creates NSTextView
     * @param text
     * @param size
     * @param color
     * @param rect_height
     * @returns {*}
     */
    createTextInput: function (rows, placeholder) {
        if (typeof rows == "undefined") {
            rows = 1;
        }
        var multiline = rows > 1;
        var tf = null;
        if (multiline) {
            tf = NSTextView.alloc().initWithFrame(NSMakeRect(0, 0, 300, rows * 16));
        } else {
            tf = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, 300, 24));
            if (typeof placeholder == "string") {
                tf.cell().setPlaceholderString(placeholder);
            }
        }
        if (multiline) {
            return {input: tf, scroller: Layout.createScroll("", undefined, undefined, 100, tf)};
        } else {
            return {input: tf, scroller: null};
        }
    },

    /**
     * Creates NSScrollView with text layers' names inside it.
     * @param layers
     * @returns {*}
     */
    createFontList: function (layers, useScroll) {
        var text = [];
        for (var index = 0; index < layers.length; ++index) {
            text.push("Layer #" + (index + 1) + ": " + layers[index].name());
        }
        text.push('');
        text = text.join("\r\n");

        var tf = Layout.createTextView(text, 12, undefined, 150);
        tf.setEditable(false);
        Layout.setSize(tf, undefined, layers.length * 15);

        if (useScroll) {
            return Layout.createScroll(text, 12, undefined, 150, tf);
        } else {
            tf.setBackgroundColor(colorScheme.bg);
            tf.setTextColor(colorScheme.text);
            return tf;
        }
    },

    /**
     * Creates custom NSTextField
     * @param text
     * @param size - font size
     * @param color - nscolor
     * @param rect_height
     * @returns {*}
     */
    createLabel: function (text, size, color, rect_width, rect_height) {
        if (rect_width == undefined) {
            rect_width = 300;
        }
        if (rect_height == undefined) {
            rect_height = 16;
        }
        var tf = NSTextField.alloc().initWithFrame(NSMakeRect(0, 0, rect_width, rect_height == "auto" ? 16 : rect_height));
        tf.setDrawsBackground(false);
        tf.setEditable(false);
        tf.setBezeled(false);
        tf.setSelectable(false);
        if (typeof color != "undefined") {
            tf.setTextColor(color);
        }
        if (typeof size != "undefined") {
            tf.setFont(NSFont.systemFontOfSize(size));
        }
        tf.setStringValue(text);

        if (rect_height == "auto") {
            //handle wrapping
            //supports only 2 lines
            if (Layout.measureView(tf).width > rect_width) {
                Layout.setSize(tf, undefined, 32);
            } else {
                Layout.setSize(tf, undefined, Layout.measureView(tf).height);
            }
        }
        return tf;
    },

    /**
     * Creates NSScrollView with textview inside it.
     * @param text
     * @param size
     * @param color
     * @param rect_height
     * @returns {*}
     */
    createScroll: function (text, size, color, rect_height, tf) {
        var scrollview = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, 300, 100));
        var contentSize = scrollview.contentSize();

        //scrollview.setBorderType(NSGrooveBorder);
        scrollview.setBorderType(NSBezelBorder);
        scrollview.setHasVerticalScroller(false);
        scrollview.setHasHorizontalScroller(false);
        if (typeof tf == "undefined") {
            tf = Layout.createTextView(text, size, color, rect_height);
        }
        tf.setMinSize(NSMakeSize(0, contentSize.height));

        tf.setVerticallyResizable(false);
        tf.setHorizontallyResizable(false);
        tf.setAutoresizingMask(NSViewWidthSizable);
        scrollview.setDocumentView(tf);
        return scrollview;
    },

    /**
     * @returns {*}
     */
    createMainScrollView: function (width, height, hasBorder) {
        var scrollview = NSScrollView.alloc().initWithFrame(NSMakeRect(0, 0, width, height));
        if (hasBorder) {
            scrollview.setBorderType(NSBezelBorder);
        } else {
            scrollview.setBorderType(NSNoBorder);
        }
        scrollview.setHasVerticalScroller(true);
        scrollview.setHasHorizontalScroller(false);
        scrollview.setDrawsBackground(true);
        scrollview.setAutoresizingMask(NSViewWidthSizable | NSViewHeightSizable);
        scrollview.setBackgroundColor(colorScheme.bg);
        return scrollview;
    },


    /**
     * Create Select Box for dialog window
     * @param  {Array}      options           Options for the select
     * @param  {Int}        selectedItem Default selected item
     * @return {NSComboBox}                   Complete select box
     */
    createSelect: function (options, selectedItem) {
        var selectedItemIndex = 0;
        for (var i = 0; i < options.length; ++i) {
            if (options[i] == selectedItem) {
                selectedItemIndex = i;
                break;
            }
        }
        var select = NSComboBox.alloc().initWithFrame(NSMakeRect(2, 0, 200, 25));
        select.addItemsWithObjectValues(options);
        select.selectItemAtIndex(selectedItemIndex);
        select.setNumberOfVisibleItems(20);

        return select;
    }
};
